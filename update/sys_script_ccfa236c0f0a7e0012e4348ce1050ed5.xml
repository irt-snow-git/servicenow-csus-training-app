<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_casus_training_training_page</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_casus_training_training_page">orderISNOTEMPTY^parentISNOTEMPTY^activeCHANGESTOtrue^NQactive=true^orderVALCHANGES^parentISNOTEMPTY^EQ<item endquery="false" field="order" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="parent" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="active" goto="false" newquery="false" operator="CHANGESTO" or="false" value="true"/>
            <item endquery="false" field="active" goto="false" newquery="true" operator="=" or="false" value="true"/>
            <item endquery="false" field="order" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="parent" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Set Next and Previous on Training Pages</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	
	//TODO: ensure new records follow guidelines
	
	//Auto-set the previous and next fields on a training page when a record is inserted or updated, and has the same parent as another page
	//algorithm is a sequential search/insert essentially
	
	//this script uses a two-pass technique at finding conflicts
	//the first pass is a gliderecord query which checks for any pages in the table with the same parent and order as the newly updated/inserted record
	//the second pass runs through the list and creates/updates references accordingly when an item is moved or inserted
	
	//link the old previous and next pages together, since this object is no longer there
	//only gets called when a page is updated, not inserted
	function updateOldReferences() {
		//update references
		
		//the current object's 'previous' page
		var prevPg = new GlideRecord('x_casus_training_training_page');
		prevPg.get(current.previous);
		
		//the current object's 'next' page
		var nextPg = new GlideRecord('x_casus_training_training_page');
		nextPg.get(current.next);
		
		//check for nulls to ensure fields are being updated correctly
		//if a null exists, the page is being moved from the front or end of the list
		if(current.next == '' || current.previous == '') {
			
			//if its next field is null, then it's being moved from the front 
			if(current.next == ''){
				//ensure the previous field exists, so its next field can be set to null, as it's now the last item in the list
				//otherwise it doesn't need an update because it doesn't exist
				if(current.previous != '') {
					prevPg.next = '';
					prevPg.update();
				}
			} 
			
			//if its previous field is null, then it's being moved from the end
			if(current.previous == '') {
				//ensure the next field exists, so its previous field can be set to null, as it's now the last item in the list
				if(current.next != '') {
					nextPg.previous = '';
					nextPg.update();
				}
			}
			
		} else {
			//both rererences exist, so update both the previous and next field
			prevPg.next = nextPg.sys_id;
			nextPg.previous = prevPg.sys_id;
			nextPg.update();
			prevPg.update();
			
		}
	}
	
	//add the new item to the front of the list, update the old
	function addCurrentToListFront(page) {
		
		var updateablePage = new GlideRecord('x_casus_training_training_page');
		updateablePage.get(page);
		
		current.previous = '';
		current.next = updateablePage.sys_id;
		current.update();
		
		//update the currently indexed page with this page's information
		updateablePage.previous = current.sys_id;
		updateablePage.update();
	}
	
	function addCurrentToListEnd(page) {
		//update the last searched page in the index with this
		
		var updateablePage = new GlideRecord('x_casus_training_training_page');
		updateablePage.get(page);
		
		updateablePage.next = current.sys_id;
		updateablePage.update();
		
		//update this item's references, with next as null, since it's being inserted last on the list
		current.previous = updateablePage.sys_id;
		current.next = '';
		current.update();
	}
	
	function addCurrentToListMiddle(page) {
		
		//page may or may not have a previous or a next, as the page passed in may be a first or last record on the list
		
		var updateablePage = new GlideRecord('x_casus_training_training_page');
		updateablePage.get(page);
		
		//now update the page which was previous to the GlideRecord retrieved page
		var prevPage = new GlideRecord('x_casus_training_training_page');
		prevPage.get(updateablePage.previous.sys_id);
		
		if(prevPage) {
			prevPage.next = current.sys_id;
			prevPage.update();
			
			current.previous = prevPage.sys_id;
		}
		
		current.next = updateablePage.sys_id;
		current.update();
		
		updateablePage.previous = current.sys_id;
		updateablePage.update();
		
	}
	
	//query for other active records with the same chapter as parent
	var page = new GlideRecord('x_casus_training_training_page');
	page.addQuery('parent', current.parent);
	page.addQuery('sys_id', '!=', current.sys_id);
	page.addNotNullQuery('order');
	page.orderBy('order');
	page.addActiveQuery();
	page.query();
	
	//attempt at finding record with the same order
	//initial filter query to prevent multiple comparisons occuring before realizing a conflict is found
	var samePage = new GlideRecord('x_casus_training_training_page');
	samePage.addQuery('parent', current.parent);
	samePage.addQuery('order', current.order);
	samePage.addActiveQuery();
	
	//call ._next() because training page table has a .next field, the private (._next) function prevents conflicts
	
	samePage.query();
	
	//first pass to check if insert matches an existing record, abort if issue exists
	if(samePage._next()) {
		gs.addErrorMessage("This update gives the page the same order as " + samePage.number + ". Please change the order of this or the other page to avoid any conflicts.");
		return current.setAbortAction(true);
	}
	
	
	//now search for the list of records
	page.query();
	
	var recNum = 0; //index variable used in place of page.getLocation(), as it's not permitted in scoped apps
	//now loop through the page table to compare order values
	while(page._next()) {
		
		if(current.order > page.order) {
			//pass this page as long as another item is in the list,
			//if not, this will be the last item in the list, and the last item will reference this one
			
			if(page.hasNext()) {
				//more records on the list, continue searching
				recNum++; //increase the index
				continue;
				
			} else {
				if(current.previous != page.sys_id) { //only update if the reference will be changing
					
					//this item is being inserted as the last item in the list
					if(current.operation() == "update") {
						
						updateOldReferences();
					}

					addCurrentToListEnd(page.sys_id);
					//update successful, exit loop and return
				}
				break;
			}
			
		} else if(current.order < page.order) {
			// insert the new record if its order is lower than that of the read record
			// it will have been checked previously & passed if the order is greater
			
			//record number is zero, meaning it's the first record in the list
			if(recNum == 0) {

				if(current.next != page.sys_id) { //only update if the page has actually moved
					
					if(current.operation() == "update") {
						updateOldReferences();
					}

					addCurrentToListFront(page.sys_id);
				}

			} else { //inserted anywhere in the list, not front or back

				//since the previous is not null, it's the first record, set previous to null
				//update the page to reference this item as its previous record
				
				if(current.next != page.sys_id) {
					
					if(current.operation() == "update") {
						updateOldReferences();
					}

					addCurrentToListMiddle(page.sys_id);
				}
			}
			//now continue because we've successfully updated or not needed to update
			break;
		}
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nicholasmyers</sys_created_by>
        <sys_created_on>2017-04-07 23:34:00</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>ccfa236c0f0a7e0012e4348ce1050ed5</sys_id>
        <sys_mod_count>91</sys_mod_count>
        <sys_name>Set Next and Previous on Training Pages</sys_name>
        <sys_overrides/>
        <sys_package display_value="Training" source="x_casus_training">b65fc30a6f417600ad6cd4a21c3ee4ba</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Training">b65fc30a6f417600ad6cd4a21c3ee4ba</sys_scope>
        <sys_update_name>sys_script_ccfa236c0f0a7e0012e4348ce1050ed5</sys_update_name>
        <sys_updated_by>nicholasmyers</sys_updated_by>
        <sys_updated_on>2017-04-18 22:01:14</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
</record_update>
